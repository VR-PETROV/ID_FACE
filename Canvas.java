import java.awt.*;
import javax.swing.*;

///////////////////////////////////////////////////////////////////////////////////////////
//
//	Класс "Canvas" построенный на основе класса "JComponent" будет рисовать указанные в нём графические объекты 
//
public class Canvas extends JComponent 
{
	Id_Face parent;		// Поле - ссылка на объект "Id_Face" из которого был создан текущий экземпляр объекта "Canvas".
	int Max_X;			// Поле - размер графического экрана по оси Х
	int Max_Y;			// Поле - размер графического экрана по оси Y

	////////////////////////////////////////////////////////////////////////////////////////
	// 	Метод, перерисовывающий элемент внутри окна при обновлении
	//
	public void paintComponent(Graphics g)
	{
		int 	X,Y;					// Счётчики цикла
		Color 	Color1;					// Цвет текущего пикселя
		
		super.paintComponents(g);		
		Graphics2D g2d=(Graphics2D) g;

		for (Y=0; Y<this.Max_Y; Y++)
		{
			for (X=0; X<this.Max_X; X++)
			{
				Color1 = new Color((int) this.parent.BMP_File_Input.Red[X][Y], (int) this.parent.BMP_File_Input.Green[X][Y], (int) this.parent.BMP_File_Input.Blue[X][Y]);   
				g2d.setColor(Color1);
				g2d.drawLine(X,Y,X,Y);
			}
		}
		
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	// 	Конструктор класса "Canvas"
	//
	//	Входные параметры : parent - Указатель на объект класса "Id_Face" из которого вызвано создание 
	//								 текущего экземпляра объекта класса "Canvas".
	//
	Canvas(Id_Face parent)
	{
		this.parent = parent;						// Запомнить указатель на объект класса "Id_Face" из которого вызвано создание текущего экземпляра объекта класса "Canvas"
	  	this.Max_X 	= parent.BMP_File_Input.Max_X;	// Установить размер графического экрана по оси Х равный размеру изображения из считанного BMP-файла
	  	this.Max_Y 	= parent.BMP_File_Input.Max_Y;	// Установить размер графического экрана по оси Y равный размеру изображения из считанного BMP-файла
	}
	
	///////////////////////////////////////////////////////////////////////////////////////
	

	
	
}

///////////////////////////////////////////////////////////////////////////////////////////


