import java.io.*;							// Использовать все классы пакета "io"						
import javax.swing.*;					// Использовать все классы пакета "swing"
import java.awt.BorderLayout;			// Использовать класс "BorderLayout" (способ отображение панели - северная, южная западная, восточная, центральная области)
import java.awt.GridLayout;				// Использовать класс "GridLayout" (способ отображение панели - сетка) 
import java.awt.event.ActionListener;	// Использовать класс "Слушатель событий".
import java.awt.event.ActionEvent;		// Использовать класс "Обработчик событий".



////////////////////////////////////////////////////////////////////////////////////////////////
//	Класс Id_Face - Выполняет чтение BMP-файла, выводит на экран изображение считанное из него, 
//					ищет на изображении лица. Содержит реализацию интерфейса "ActionListener" и 
//					является слушателем щелчков по кнопкам.
//	

public class Id_Face implements ActionListener 
{
	BMP_File 	BMP_File_Input;			// Указатель на объект входной BMP-файл
	JPanel 		windowContent;			// Поле - указатель на объект класса "JPanel"  (главная панель).
	JButton		buttonStart;			// Поле - указатель на объект класса "JButton" (кнопка "Старт" запускающая процесс поиска лиц на изображении)					
	Canvas 		canv;					// Поле - Указатель на инструмент рисования на графическом экране		
	BMP_File	BMP_File_Protokol;		// Поле - указатель на BMP-файл в который записывается протокол работы программы
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Конструктор класса "Id_Face".
	//
	//	Входные параметры : BMP_Input_FileName1 - Имя входного файла содержащего изображение 
	//
	Id_Face(String BMP_Input_FileName1)
	{
		String 			stroka;	// Вспомогательная строка применяемая для вывода на экран	
		JFrame			frame;	// Указатель на фрейм
		BorderLayout 	b1;		// Указатели на схему размещения № 1 (север, юг, запад, восток, центр).

		System.out.println("\n Выбран файл : "+BMP_Input_FileName1+" для обработки");	// Выдать на экран имя файла содержащего исходное изображение предназначено для обработки.			
		BMP_File_Input = new BMP_File("pustoi.bmp",100,100);							// Создать объект "Пустой BMP-фвйл"
		BMP_File_Input.BMP_File_Open(BMP_Input_FileName1);								// Прочитать BMP-фвйл содержащее исходное изображение предназначено для обработки.
		
		this.windowContent 	= new JPanel();			// Создать главную панель 
		b1					= new BorderLayout();	// Создать схему размещения (север, юг, запад, восток, центр).
		this.windowContent.setLayout(b1);			// Установить для главной панели схему размещения (север, юг, запад, восток, центр).
								
		this.canv 			= new Canvas(this);		// Создать инструмент рисования, в качестве аргумента указать указатель на текущий экземпляр объекта "Id_Face".
		this.windowContent.add("Center",this.canv);	// Добавить инструмент рисования в центр главной панели
		this.canv.repaint();						// Выдать изображение из считанного BMP-файла на экран.
								
		this.buttonStart =  new JButton("Старт");			// Создать кнопку "Старт" запускающую обработку изображения.	
		this.windowContent.add("South",this.buttonStart);	// Добавить кнопку "Старт" в южную область главной панели
		this.buttonStart.addActionListener(this);			// Установить объект этого класса слушателем и обработчиком щелчка по кнопке "Старт".
								
		frame = new JFrame("Поиск лиц на изображении");							// Создать фрейм с надписью 
		frame.setContentPane(windowContent);									// На фрейме изображаем панель с кнопками, полями ввода и графическим окном. 
		frame.setBounds(0, 0, BMP_File_Input.Max_X,	BMP_File_Input.Max_Y+20);	// Установить размеры окна 								
		frame.setVisible(true);													// Сделаем фрейм видимым
	}
	
	////////////////////////////////////////////////////////////////////////////////////
	// 	Метод - обработчик события щелчка по кнопке.
	//
	//	Входные параметры : Event - Указатель на источник вызвавший событие.
	//	
	//	Выходные параметры : Нет
	//	
	//	Возвращаемое значение : Нет	
	//
	public void actionPerformed(ActionEvent Event)
	{
		Object	src;				// Источник события как объект
		int		Razmer_ramka;		// Размер стороны квадратной рамки в пикселях
		int		X;					// Координата X верхнего левого угла рамки при перемещении рамки по изображению  	
		int		Y;					// Координата Y верхнего левого угла рамки при перемещении рамки по изображению
		
		int		X_levo;				// Координата X левого края рамки при перемещении рамки по изображению
		int		X_pravo; 			// Координата X правого края рамки при перемещении рамки по изображению
		
		int		Y_werh;				// Координата Y вехнего края рамки при перемещении рамки по изображению
		int		Y_nis;				// Координата Y нижнего края рамки при перемещении рамки по изображению

		int		X1;					// Счётчик цикла
		int		Y1;					// Счётчик цикла
		int		nom_kart;
		
		FileWriter File1;			// Дескриптор текстового файла в который идёт вывод протокола работы программы
		
		int 	X_lev_werh ;		// Координата X верхнего левого угла участка 
		int 	Y_lev_werh ;		// Координата Y верхнего левого угла участка 
		
		int 	X_prav_nis ;		// Координата X нижнего правого угла участка 	
		int 	Y_prav_nis ;		// Координата Y нижнего правого угла участка 
		
		double 	Sum_chern_uchastok_1;	// Суммарная яркость чёрного участка № 1
		double 	Sum_chern_uchastok_2;	// Суммарная яркость чёрного участка № 2
		double 	Sum_chern_uchastok_3;	// Суммарная яркость чёрного участка № 3
		double 	Sum_chern_uchastok_4;	// Суммарная яркость чёрного участка № 4
		
		double 	Sum_bel_uchastok_1;		// Суммарная яркость белого участка № 1		
		double 	Sum_bel_uchastok_2;		// Суммарная яркость белого участка № 2		
		
		double 	Sum_bel_uchastok;		// Суммарная яркость белого участка
		double 	Sum_chern_uchastok;		// Суммарная яркость чёрного участка

		
		
		/*		
		double	Rezult_Maska_01;		// Результат маски № 1 
		double	Rezult_Maska_02;		// Результат маски № 2
		double	Rezult_Maska_03;		// Результат маски № 3 		
		double	Rezult_Maska_04;		// Результат маски № 4		
		double	Rezult_Maska_05;		// Результат маски № 5
		double	Rezult_Maska_06;		// Результат маски № 6 
		double	Rezult_Maska_07;		// Результат маски № 7
		double	Rezult_Maska_08;		// Результат маски № 8
*/
		
		double	Rezult_Maska_09;		// Результат маски № 9
		double	Rezult_Maska_10;		// Результат маски № 10

		double	Rezult_Maska_11;		// Результат маски № 11
		double	Rezult_Maska_12;		// Результат маски № 12
		double	Rezult_Maska_13;		// Результат маски № 13
		
		double	Rezult_Maska_14;		// Результат маски № 14
		double	Rezult_Maska_15;		// Результат маски № 15		
		double	Rezult_Maska_16;		// Результат маски № 16
		
		double	Rezult_Maska_17;		// Результат маски № 17		
		double	Rezult_Maska_18;		// Результат маски № 18
		double	Rezult_Maska_19;		// Результат маски № 19		
		
		int  	dX;						// Размер участка по оси X 
		int 	dY;						// Размер участка по оси Y

		String	BMP_Protokol_FileName_Dobavka1;	// Добавка к имени файла содержащая нули и размер маски в пикселях.
		String	BMP_Protokol_FileName_Dobavka2;	// Добавка к имени файла содержащая нули и номер стороки.
		String	BMP_Protokol_FileName_Dobavka3;	// Добавка к имени файла содержащая нули и номер пикселя.
		String	BMP_Protokol_FileName;			// Имя BMP-файла протокола работы программы
		
		int		BMP_Protokol_Max_X;				// Размер по горизонтали области изображения BMP-файла протокола работы программы.
		int		BMP_Protokol_Max_Y;				// Размер по вертикали области изображения BMP-файла протокола работы программы.
		
		src	= Event.getSource();	// Получить источник события как объект.
		
		if (src == this.buttonStart)
		{
			// Источником события была кнопка "Старт"
			System.out.println(" Была нажата кнопка 'Старт' ");		// Выдать на экран предупреждающее сообщение

			//////////////////////////////////////////////////////////////////////////////////////////////
			//
			/*
			// Тестирование методов нахождения суммарной яркости прямоугольных участков изображения
			System.out.println(" ");			
			System.out.println(" Тестирование методов нахождения суммарной яркости прямоугольных участков изображения ");	
			System.out.println(" ");			

			double rez1, rez2;
			
			int X1=2; 
			int X2=4; 
			int Y1=4; 
			int Y2=8;
			
			rez1 = Sum_Yark_1( X1, Y1, X2, Y2 );
			rez2 = Sum_Yark_2( X1, Y1, X2, Y2 );
			
			System.out.println(" rez1= "+rez1+"     rez2= "+rez2);			
			*/
			//
			//////////////////////////////////////////////////////////////////////////////////////////////

			try
	        {
				//  Попытка создания текстового файла для вывода протокола работы программы
				File1  = new FileWriter("C:\\TEMP\\1\\Protokol.txt", false);		// Создать текстовый файл для вывода протокола работы (если файл с таким именем уже существует тогда удалить его).

				// Обнулить счётчик картинок
				nom_kart = 0;
				
				Razmer_ramka = 24;		// Установить начальное значение размера стороны квадратной рамки в пикселях

				//Razmer_ramka = 16;		// Установить начальное значение размера стороны квадратной рамки в пикселях
								
				
				
				// Перебор в цикле всех возможных размеров рамок увеличивая размер на 1.2 на каждом шаге, 
				// до тех пор пока очередная рамка помещается в изображение.
				//
				while ((Razmer_ramka < this.BMP_File_Input.Max_X) && (Razmer_ramka <  BMP_File_Input.Max_Y))
				{
					File1.write("\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *");
					File1.write("\n Размер стороны рамки = "+Razmer_ramka);
					
					// Сформировать добавку к имени BMP-файла в который записывается размер рамки. 
					BMP_Protokol_FileName_Dobavka1 = Integer.toString(Razmer_ramka);
					while (BMP_Protokol_FileName_Dobavka1.length() < 5) BMP_Protokol_FileName_Dobavka1 = "0"+BMP_Protokol_FileName_Dobavka1;
						
					//	Создать каталог  "C:\\TEMP\\1\\BMP_Protokol_FileName_Dobavka1
					new File("C:\\TEMP\\1\\"+BMP_Protokol_FileName_Dobavka1).mkdir();
					
					// Перебор в цикле всех строк изображения из BMP-файла
					for (Y=0; Y< this.BMP_File_Input.Max_Y-Razmer_ramka; Y++)
					{
						Y_werh 	= Y;					// Верхняя граница рамки
						Y_nis	= Y+Razmer_ramka;		// Нижняя граница рамки	
						
						// Сформировать добавку к имени BMP-файла в который записывается номер строки. 
						BMP_Protokol_FileName_Dobavka2 = Integer.toString(Y);
						while (BMP_Protokol_FileName_Dobavka2.length() < 5) BMP_Protokol_FileName_Dobavka2 = "0"+BMP_Protokol_FileName_Dobavka2;

						//	Создать каталог  "C:\\TEMP\\1\\BMP_Protokol_FileName_Dobavka1\\BMP_Protokol_FileName_Dobavka2						
						new File("C:\\TEMP\\1\\"+BMP_Protokol_FileName_Dobavka1+"\\"+BMP_Protokol_FileName_Dobavka2).mkdir();
						
						// Перебор в цикле всех пикселей текущей строки BMP-файла
						for (X=0; X < this.BMP_File_Input.Max_X-Razmer_ramka; X++)
						{
							X_levo 	= X;				// Левая граница рамки
							X_pravo = X+Razmer_ramka;	// Правая граница рамки

							// Сформировать добавку к имени BMP-файла в который записывается номер пикселя в строке. 
							BMP_Protokol_FileName_Dobavka3 = Integer.toString(X);
							while (BMP_Protokol_FileName_Dobavka3.length() < 5) BMP_Protokol_FileName_Dobavka3 = "0"+BMP_Protokol_FileName_Dobavka3;

							// Сформировать имя BMP-файла в который записывается протокол работы программы. 	
							//BMP_Protokol_FileName = "C:\\TEMP\\1\\"+BMP_Protokol_FileName_Dobavka1+"\\"+BMP_Protokol_FileName_Dobavka2+"\\"+"PROTOKOL_"+BMP_Protokol_FileName_Dobavka1+"_"+BMP_Protokol_FileName_Dobavka2+"_"+BMP_Protokol_FileName_Dobavka3+".bmp";
							BMP_Protokol_FileName = "C:\\TEMP\\1\\"+"PROTOKOL_"+BMP_Protokol_FileName_Dobavka1+"_"+BMP_Protokol_FileName_Dobavka2+"_"+BMP_Protokol_FileName_Dobavka3+".bmp";
							
							// Определить размеры по горизонтали и вертикали изображения в BMP-файле.
							if  (Razmer_ramka > 400)
								BMP_Protokol_Max_X = (int) Razmer_ramka;   
							else
								BMP_Protokol_Max_X = 400;
							
							BMP_Protokol_Max_Y = (int) Razmer_ramka+180;
							
							// Выдать в протокол имя созданного  BMP-файла
							System.out.println(" "+BMP_Protokol_FileName_Dobavka1+" "+BMP_Protokol_FileName_Dobavka2+" "+BMP_Protokol_FileName_Dobavka3);		

							File1.write("\n	* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  * * * * * * * * * ");
							File1.write("\n"+BMP_Protokol_FileName_Dobavka1+" "+BMP_Protokol_FileName_Dobavka2+" "+BMP_Protokol_FileName_Dobavka3+" ");							
							File1.write("\n	");
							File1.write("\n	Рассматриваемая область изображения    по оси X: от "+X_levo+" до "+X_pravo+"        по оси Y: от "+Y_werh+" до "+Y_nis+"       Длина стороны рамки: "+Razmer_ramka);
							
							// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/*							
							// Получить численную оценку для маски № 1 (переносица, половина глаз, нижняя часть лба)
							File1.write("\n		Маска № 1 (Переносица, половина глаз, нижняя часть лба)");

							// Определить длину и ширину участка для маски № 1	
							dX = Razmer_ramka * 20/80;
							dY = Razmer_ramka * 10/80;
							
							// Получение суммарной яркости чёрного участка (нижняя часть лба)
							X_lev_werh = X_levo + (X_pravo - X_levo) * 30/80;	// Координата X верхнего левого угла чёрного участка  (нижняя часть лба)
							Y_lev_werh = Y_werh + (Y_nis   - Y_werh) * 27/80;	// Координата Y верхнего левого угла чёрного участка  (нижняя часть лба)
							X_prav_nis = X_lev_werh + dX;						// Координата X нижнего правого угла чёрного участка  (нижняя часть лба)	
							Y_prav_nis = Y_lev_werh + dY;						// Координата Y нижнего правого угла чёрного участка  (нижняя часть лба)
							Sum_chern_uchastok = this.BMP_File_Input.Sum_Yark_1(X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка (нижняя часть лба)
							File1.write("\n			Чёрный участок (нижняя часть лба) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok);
							
							// Получение суммарной яркости белого участка (переносица, половина глаз)
							X_lev_werh = X_lev_werh;		// Координата X верхнего левого угла белого участка  (переносица, половина глаз)
							Y_lev_werh = Y_prav_nis+1;		// Координата Y верхнего левого угла белого участка  (переносица, половина глаз)
							X_prav_nis = X_prav_nis;		// Координата X нижнего правого угла белого участка  (переносица, половина глаз)	
							Y_prav_nis = Y_lev_werh + dY;	// Координата Y нижнего правого угла белого участка  (переносица, половина глаз)
							Sum_bel_uchastok = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей белого участка (переносица, половина глаз)
							File1.write("\n			Белый участок (переносица, половина глаз) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_bel_uchastok);
							
							// Получить результат маски № 1 (сумма всех белых участков - сумма всех чёрных участков)							
							Rezult_Maska_01 = Sum_bel_uchastok - Sum_chern_uchastok;		
							File1.write("\n		Маска № 1 (Переносица, половина глаз, нижняя часть лба): "+Rezult_Maska_01);
							File1.write("\n			 ");
							
							// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
							
							// Получить численную оценку для маски № 2 (глаза, переносица, нижняя часть лба, брови).
							File1.write("\n		Маска № 2 (глаза, переносица, нижняя часть лба, брови)");

							// Определить длину и ширину участка для маски № 2	
							dX = Razmer_ramka * 44/80;
							dY = Razmer_ramka * 10/80;
							
							// Получение суммарной яркости чёрного участка (нижняя часть лба, брови)
							X_lev_werh = X_levo + (X_pravo - X_levo) * 18/80;	// Координата X верхнего левого угла чёрного участка  (нижняя часть лба)
							Y_lev_werh = Y_werh + (Y_nis   - Y_werh) * 27/80;	// Координата Y верхнего левого угла чёрного участка  (нижняя часть лба)
							X_prav_nis = X_lev_werh + dX;						// Координата X нижнего правого угла чёрного участка  (нижняя часть лба)
							Y_prav_nis = Y_lev_werh + dY;						// Координата Y нижнего правого угла чёрного участка  (нижняя часть лба)
							Sum_chern_uchastok = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка (нижняя часть лба)
							File1.write("\n			Чёрный участок (нижняя часть лба, брови) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok);
							
							// Получение суммарной яркости белого участка (переносица, глаза)
							X_lev_werh = X_lev_werh;							// Координата X верхнего левого угла белого участка  (переносица, глаза)
							Y_lev_werh = Y_prav_nis + 1;						// Координата Y верхнего левого угла белого участка  (переносица, глаза)
							X_prav_nis = X_prav_nis;							// Координата X нижнего правого угла белого участка  (переносица, глаза)	
							Y_prav_nis = Y_lev_werh + dY;						// Координата Y нижнего правого угла белого участка  (переносица, глаза)
							
							Sum_bel_uchastok = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей белого участка (переносица, глаза)
							File1.write("\n			Белый участок (переносица, половина глаз) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_bel_uchastok);
							
							// Получить результат маски № 2 (сумма всех белых участков - сумма всех чёрных участков)							
							Rezult_Maska_02 = Sum_bel_uchastok - Sum_chern_uchastok;		
							File1.write("\n		Маска № 2 (глаза, переносица, нижняя часть лба, брови): "+Rezult_Maska_02);
							File1.write("\n			 ");
							
							// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

							// Получить численную оценку для маски № 3 (очки).
							File1.write("\n		Маска № 3 (Очки)");
						
							// Определить длину и ширину участка для маски № 3
							dX = Razmer_ramka * 13/80;
							dY = Razmer_ramka * 8/80;
							
							// Получение суммарной яркости чёрного участка № 1 (левый глаз)
							X_lev_werh = X_levo + (X_pravo - X_levo) * 21/80;	// Координата X верхнего левого угла чёрного участка № 1 (левый глаз)
							Y_lev_werh = Y_werh + (Y_nis   - Y_werh) * 37/80;	// Координата Y верхнего левого угла чёрного участка № 1 (левый глаз)
							X_prav_nis = X_lev_werh + dX;						// Координата X нижнего правого угла чёрного участка № 1 (левый глаз)	
							Y_prav_nis = Y_lev_werh + dY;						// Координата Y нижнего правого угла чёрного участка № 1 (левый глаз)
							Sum_chern_uchastok_1 = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка № 1 (левый глаз)
							File1.write("\n			Чёрный участок № 1 (левый глаз) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok_1);
							
							// Получение суммарной яркости белого участка (переносица)	
							X_lev_werh = X_prav_nis + 1;						// Координата X верхнего левого угла белого участка  (переносица) 
							Y_lev_werh = Y_lev_werh;							// Координата Y верхнего левого угла белого участка  (переносица) 
							X_prav_nis = X_lev_werh + dX;						// Координата X нижнего правого угла чёрного участка (переносица)
							Y_prav_nis = Y_prav_nis;							// Координата Y нижнего правого угла чёрного участка (переносица)
							Sum_bel_uchastok = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis);			// Определить суммарную яркость пикселей белого участка   
							File1.write("\n			Белый участок      (переносица) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_bel_uchastok);
							
							// Получение суммарной яркости чёрного участка № 2 (правый глаз)
							X_lev_werh = X_prav_nis + 1;						// Координата X верхнего левого угла чёрного участка № 2 (правый глаз)
							Y_lev_werh = Y_lev_werh;							// Координата Y верхнего левого угла чёрного участка № 2 (правый глаз)
							X_prav_nis = X_lev_werh + dX;						// Координата X нижнего правого угла чёрного участка № 2 (правый глаз)	
							Y_prav_nis = Y_prav_nis;							// Координата Y нижнего правого угла чёрного участка № 2 (правый глаз)
							Sum_chern_uchastok_2 = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка № 2 (правый глаз)
							File1.write("\n			Чёрный участок № 2 (правый глаз)("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok_2);
							
							// Получить результат маски № 3 (сумма всех белых участков - сумма всех чёрных участков)							
							Rezult_Maska_03 = Sum_bel_uchastok - Sum_chern_uchastok_1 - Sum_chern_uchastok_2;		
							File1.write("\n		Маска № 3 (Очки): "+Rezult_Maska_03);
							File1.write("\n			 ");
							
							// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
							
							// Получить численную оценку для маски № 4 (глаза, переносица, нижняя часть лба, брови - тонкая).
							File1.write("\n		Маска № 4 (глаза, переносица, нижняя часть лба, брови) - тонкая ");

							// Определить длину и ширину участка для маски № 4	
							dX = Razmer_ramka * 46/80;
							dY = Razmer_ramka * 7/80;
							
							X_lev_werh = X_levo + (X_pravo - X_levo) * 18/80;	// Координата X верхнего левого угла чёрного участка  (нижняя часть лба)
							Y_lev_werh = Y_werh + (Y_nis   - Y_werh) * 31/80;	// Координата Y верхнего левого угла чёрного участка  (нижняя часть лба)
							X_prav_nis = X_lev_werh + dX;						// Координата X нижнего правого угла чёрного участка  (нижняя часть лба)
							Y_prav_nis = Y_lev_werh + dY;						// Координата Y нижнего правого угла чёрного участка  (нижняя часть лба)
							Sum_chern_uchastok = BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка (нижняя часть лба)
							File1.write("\n			Чёрный участок (нижняя часть лба, брови) - тонкий ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok);

							// Получение суммарной яркости белого участка (переносица, глаза)
							X_lev_werh = X_lev_werh;							// Координата X верхнего левого угла белого участка  (переносица, глаза)
							Y_lev_werh = Y_prav_nis + 1;						// Координата Y верхнего левого угла белого участка  (переносица, глаза)
							X_prav_nis = X_prav_nis;							// Координата X нижнего правого угла белого участка  (переносица, глаза)	
							Y_prav_nis = Y_lev_werh + dY;						// Координата Y нижнего правого угла белого участка  (переносица, глаза)
							Sum_bel_uchastok = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей белого участка (переносица, глаза)
							File1.write("\n			Белый участок (переносица, половина глаз) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_bel_uchastok);
							
							// Получить результат маски № 4 (сумма всех белых участков - сумма всех чёрных участков)							
							Rezult_Maska_04 = Sum_bel_uchastok - Sum_chern_uchastok;		
							File1.write("\n		Маска № 4 (глаза, переносица, нижняя часть лба, брови) - тонкая : "+Rezult_Maska_04);
							File1.write("\n			 ");
							
							// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
							
							// Получить численную оценку для маски № 5 (Брови - Глаза, переносица - Подглазные впадины, нос).	
							File1.write("\n		Маска № 5 (Брови - Глаза, переносица - Подглазные впадины, нос) ");

							// Определить длину и ширину участка для маски № 5	
							dX = Razmer_ramka * 46/80;
							dY = Razmer_ramka * 7/80;
							
							// Получение суммарной яркости чёрного участка № 1 (Брови)
							X_lev_werh = X_levo + (X_pravo - X_levo) * 18/80;	// Координата X верхнего левого угла чёрного участка  (Брови)
							Y_lev_werh = Y_werh + (Y_nis   - Y_werh) * 31/80;	// Координата Y верхнего левого угла чёрного участка  (Брови)
							X_prav_nis = X_lev_werh + dX;						// Координата X нижнего правого угла чёрного участка  (Брови)
							Y_prav_nis = Y_lev_werh + dY;						// Координата Y нижнего правого угла чёрного участка  (Брови)
							Sum_chern_uchastok_1 = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка (нижняя часть лба, брови)
							File1.write("\n			Чёрный участок № 1 (нижняя часть лба, брови) - тонкий ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok_1);

							// Получение суммарной яркости белого участка (переносица, глаза)
							X_lev_werh = X_lev_werh;							// Координата X верхнего левого угла белого участка  (переносица, глаза)
							Y_lev_werh = Y_prav_nis + 1;						// Координата Y верхнего левого угла белого участка  (переносица, глаза)
							X_prav_nis = X_prav_nis;							// Координата X нижнего правого угла белого участка  (переносица, глаза)	
							Y_prav_nis = Y_lev_werh + dY;						// Координата Y нижнего правого угла белого участка  (переносица, глаза)
							Sum_bel_uchastok = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей белого участка (переносица, глаза)
							File1.write("\n			Белый участок (переносица, глаза) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_bel_uchastok);

							// Получение суммарной яркости чёрного участка № 2 (Подглазные впадины, нос)
							X_lev_werh = X_lev_werh;							// Координата X верхнего левого угла белого участка  (Подглазные впадины, нос)
							Y_lev_werh = Y_prav_nis + 1;						// Координата Y верхнего левого угла белого участка  (Подглазные впадины, нос)
							X_prav_nis = X_prav_nis;							// Координата X нижнего правого угла белого участка  (Подглазные впадины, нос)	
							Y_prav_nis = Y_lev_werh + dY;						// Координата Y нижнего правого угла белого участка  (Подглазные впадины, нос)
							Sum_chern_uchastok_2 = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка (Подглазные впадины, нос)
							File1.write("\n			Чёрный участок № 2 (Подглазные впадины, нос) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok_2);
							
							// Получить результат маски № 5 (сумма всех белых участков - сумма всех чёрных участков)							
							Rezult_Maska_05 = Sum_bel_uchastok - Sum_chern_uchastok_1 - Sum_chern_uchastok_2;		
							File1.write("\n		Маска № 5 (Брови - Глаза, переносица - Подглазные впадины, нос): "+Rezult_Maska_05);
							File1.write("\n			 ");
							
							// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
							
							// Получить численную оценку для маски № 6 (Нос + Глаза + Брови).
							File1.write("\n		Маска № 6 (Нос + Глаза + Брови)");

							// Определить длину и ширину участка для маски № 6
							dX = Razmer_ramka * 18/80;
							dY = Razmer_ramka * 25/80;
							
							// Получение суммарной яркости чёрного участка (левая часть)
							X_lev_werh = X_levo + (X_pravo - X_levo) * 23/80;	// Координата X верхнего левого угла чёрного участка № 1 (левая часть)
							Y_lev_werh = Y_werh + (Y_nis   - Y_werh) * 32/80;	// Координата Y верхнего левого угла чёрного участка № 1 (левая часть)
							X_prav_nis = X_lev_werh + dX;						// Координата X нижнего правого угла чёрного участка № 1 (левая часть)	
							Y_prav_nis = Y_lev_werh + dY;						// Координата Y нижнего правого угла чёрного участка № 1 (левая часть)
							Sum_chern_uchastok = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка (левая часть)
							File1.write("\n			Чёрный участок (левая часть) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok);
							
							// Получение суммарной яркости белого участка (правая часть)
							X_lev_werh = X_prav_nis + 1;						// Координата X верхнего левого угла белого участка  (правая часть) 
							Y_lev_werh = Y_lev_werh;							// Координата Y верхнего левого угла белого участка  (правая часть) 
							X_prav_nis = X_lev_werh + dX;						// Координата X нижнего правого угла чёрного участка (правая часть)
							Y_prav_nis = Y_prav_nis;							// Координата Y нижнего правого угла чёрного участка (правая часть)
							Sum_bel_uchastok = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей белого участка (правая часть)
							File1.write("\n			Белый участок (правая часть)("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_bel_uchastok);

							// Получить результат маски № 6 (сумма белого участка - сумма чёрного участка)							
							Rezult_Maska_06 = Math.abs((Sum_bel_uchastok-Sum_chern_uchastok)/(Sum_bel_uchastok+Sum_chern_uchastok));							
							
							File1.write("\n		Маска № 6 (Нос + Глаза + Брови): "+Rezult_Maska_06);
							File1.write("\n			 ");

							// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

							// Получить численную оценку для маски № 7 (левая и правая части центра лица).
							File1.write("\n		Маска № 7 (левая и правая части центра лица)");

							// Определить длину и ширину участка для маски № 7
							dX = Razmer_ramka * 16/80;
							dY = Razmer_ramka * 40/80;
							
							// Получение суммарной яркости чёрного участка  (левая часть центра лица )
							X_lev_werh = X_levo + (X_pravo - X_levo) * 26/80;	// Координата X верхнего левого угла чёрного участка № 1 (левая часть центра лица)
							Y_lev_werh = Y_werh + (Y_nis   - Y_werh) * 30/80;	// Координата Y верхнего левого угла чёрного участка № 1 (левая часть центра лица)
							X_prav_nis = X_lev_werh + dX;						// Координата X нижнего правого угла чёрного участка № 1 (левая часть центра лица)	
							Y_prav_nis = Y_lev_werh + dY;						// Координата Y нижнего правого угла чёрного участка № 1 (левая часть центра лица)
							Sum_chern_uchastok = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка (левая часть центра лица)
							File1.write("\n			Чёрный участок (левая часть центра лица) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok);
							
							// Получение суммарной яркости белого участка (правая часть центра лица)
							X_lev_werh = X_prav_nis + 1;						// Координата X верхнего левого угла белого участка  № 2 (правая часть центра лица) 
							Y_lev_werh = Y_lev_werh;							// Координата Y верхнего левого угла белого участка  № 2 (правая часть центра лица) 
							X_prav_nis = X_lev_werh + dX;						// Координата X нижнего правого угла чёрного участка № 2 (правая часть центра лица)
							Y_prav_nis = Y_prav_nis;							// Координата Y нижнего правого угла чёрного участка № 2 (правая часть центра лица)
							Sum_bel_uchastok = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей белого участка (правая часть центра лица)
							File1.write("\n			Белый участок (правая часть центра лица)("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_bel_uchastok);
							
							// Получить результат маски № 7 (сумма белого участка - сумма чёрного участка)							
							//Rezult_Maska_07 = Sum_bel_uchastok - Sum_chern_uchastok;		
							Rezult_Maska_07 = Math.abs((Sum_bel_uchastok-Sum_chern_uchastok)/(Sum_bel_uchastok+Sum_chern_uchastok));		
							
							File1.write("\n		Маска № 7 (центр лица): "+Rezult_Maska_07);
							File1.write("\n			 ");

							// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
							
							// Получить численную оценку для маски № 8 (Нижняя часть лба, глаза, щёки + нос).							
							File1.write("\n		Маска № 8 (Нижняя часть лба, глаза, щёки + нос)");

							// Определить длину и ширину участка для маски № 8
							dX = Razmer_ramka * 39/80;
							dY = Razmer_ramka * 18/80;

							// Получение суммарной яркости чёрного участка № 1 (Нижняя часть лба)
							X_lev_werh = X_levo + (X_pravo - X_levo) * 23/80;	// Координата X верхнего левого угла чёрного участка  (Нижняя часть лба)
							Y_lev_werh = Y_werh + (Y_nis   - Y_werh) * 21/80;	// Координата Y верхнего левого угла чёрного участка  (Нижняя часть лба)
							X_prav_nis = X_lev_werh + dX;						// Координата X нижнего правого угла чёрного участка  (Нижняя часть лба)
							Y_prav_nis = Y_lev_werh + dY;						// Координата Y нижнего правого угла чёрного участка  (Нижняя часть лба)
							Sum_chern_uchastok_1 = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка (нижняя часть лба, брови)
							File1.write("\n			Чёрный участок № 1 (нижняя часть лба) "+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok_1);

							// Получение суммарной яркости белого участка (переносица, глаза)
							X_lev_werh = X_lev_werh;							// Координата X верхнего левого угла белого участка  (переносица, глаза)
							Y_lev_werh = Y_prav_nis + 1;						// Координата Y верхнего левого угла белого участка  (переносица, глаза)
							X_prav_nis = X_prav_nis;							// Координата X нижнего правого угла белого участка  (переносица, глаза)	
							Y_prav_nis = Y_lev_werh + dY;						// Координата Y нижнего правого угла белого участка  (переносица, глаза)
							Sum_bel_uchastok = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей белого участка (переносица, глаза)
							File1.write("\n			Белый участок (переносица, глаза) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_bel_uchastok);
							
							// Получение суммарной яркости чёрного участка № 2 (щёки, нос)
							X_lev_werh = X_lev_werh;							// Координата X верхнего левого угла белого участка  (щёки, нос)
							Y_lev_werh = Y_prav_nis + 1;						// Координата Y верхнего левого угла белого участка  (щёки, нос)
							X_prav_nis = X_prav_nis;							// Координата X нижнего правого угла белого участка  (щёки, нос)	
							Y_prav_nis = Y_lev_werh + dY;						// Координата Y нижнего правого угла белого участка  (щёки, нос)
							Sum_chern_uchastok_2 = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка (щёки, нос)
							File1.write("\n			Чёрный участок № 2 (щёки, нос) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok_2);
							
							// Получить результат маски № 8 (сумма всех белых участков - сумма всех чёрных участков)							
							Rezult_Maska_08 = Sum_bel_uchastok - Sum_chern_uchastok_1 - Sum_chern_uchastok_2;		
							File1.write("\n		Маска № 8 (Нижняя часть лба, глаза, щёки + нос) : "+Rezult_Maska_08);
							File1.write("\n			 ");
*/

							// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
						
							// Получить численную оценку для маски № 9 (Левый глаз + правая половина рта, левая половина рта + правый глаз   ).							
							File1.write("\n		Маска № 9 (Левый глаз + правая половина рта, левая половина рта + правый глаз)");
						
							// Определить длину и ширину участка для маски № 9
							dX = Razmer_ramka * 1/2;
							dY = Razmer_ramka * 1/2;

							// Получение суммарной яркости чёрного участка № 1 (Левый глаз)
							X_lev_werh = X_levo;					// Координата X верхнего левого угла чёрного участка  (Левый глаз)
							Y_lev_werh = Y_werh;					// Координата Y верхнего левого угла чёрного участка  (Левый глаз)
							X_prav_nis = X_lev_werh + dX;			// Координата X нижнего правого угла чёрного участка  (Левый глаз)
							Y_prav_nis = Y_lev_werh + dY;			// Координата Y нижнего правого угла чёрного участка  (Левый глаз)
							Sum_chern_uchastok_1 = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка № 1 (Левый глаз)
							File1.write("\n			Чёрный участок № 1 (Левый глаз) "+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok_1);
							
							// Получение суммарной яркости чёрного участка № 2 (правая половина рта)
							X_lev_werh = X_prav_nis + 1;  			// Координата X верхнего левого угла белого участка (правая половина рта)
							Y_lev_werh = Y_prav_nis + 1;			// Координата Y верхнего левого угла белого участка (правая половина рта)
							X_prav_nis = X_lev_werh + dX;  			// Координата X нижнего правого угла белого участка (правая половина рта)
							Y_prav_nis = Y_lev_werh + dY;			// Координата Y нижнего правого угла белого участка (правая половина рта)
							Sum_chern_uchastok_2 = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка  № 2 (правая половина рта)
							File1.write("\n			Чёрный участок № 2 (Правая половина рта) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok_2);
							
							// Получение суммарной яркости белого участка № 1 (Левая половина рта)							
							X_lev_werh = X_levo;								// Координата X верхнего левого угла чёрного участка  (Левая половина рта)
							Y_lev_werh = Y_werh + dY + 1;						// Координата Y верхнего левого угла чёрного участка  (Левая половина рта)
							X_prav_nis = X_lev_werh + dX;						// Координата X нижнего правого угла чёрного участка  (Левая половина рта)
							Y_prav_nis = Y_lev_werh + dY;						// Координата Y нижнего правого угла чёрного участка  (Левая половина рта)
							Sum_bel_uchastok_1 = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей белого участка № 1 (Левая половина рта)
							File1.write("\n			Белый участок № 1 (Левая половина рта) "+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_bel_uchastok_1);
							
							// Получение суммарной яркости белого участка № 2 (Правый глаз)
							X_lev_werh = X_prav_nis + 1;  						// Координата X верхнего левого угла белого участка (Правый глаз)
							Y_lev_werh = Y_werh;								// Координата Y верхнего левого угла белого участка (Правый глаз)
							X_prav_nis = X_lev_werh + dX;  						// Координата X нижнего правого угла белого участка (Правый глаз)
							Y_prav_nis = Y_lev_werh + dY;						// Координата Y нижнего правого угла белого участка (Правый глаз)
							Sum_bel_uchastok_2 = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей белого участка № 2 (Правый глаз)
							File1.write("\n			Белый участок № 2 (Правый глаз) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_bel_uchastok_2);
							
							// Получить результат маски № 9 (сумма белого участка № 1 и № 2 - сумма чёрного участка № 1 и № 2)							
							Rezult_Maska_09 = Math.abs((Sum_bel_uchastok_1 + Sum_bel_uchastok_2 - Sum_chern_uchastok_1 - Sum_chern_uchastok_2) / (Sum_bel_uchastok_1 + Sum_bel_uchastok_2 + Sum_chern_uchastok_1 + Sum_chern_uchastok_2));		
							
							File1.write("\n		Маска № 09 (Левый глаз + правая половина рта, левая половина рта + правый глаз): "+Rezult_Maska_09);
							File1.write("\n			 ");

							// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
						
							// Получить численную оценку для маски № 11 (Симметрия левой половины и правой половины).							
							File1.write("\n		Маска № 11 (Симметрия левой половины и правой половины)");

							// Определить длину и ширину участка для маски № 11
							dX = Razmer_ramka/2;
							dY = Razmer_ramka;
							
							// Получение суммарной яркости чёрного участка № 1 (Левая половина)
							X_lev_werh = X_levo;				// Координата X верхнего левого угла чёрного участка  (Левая половина)
							Y_lev_werh = Y_werh;				// Координата Y верхнего левого угла чёрного участка  (Левая половина)
							X_prav_nis = X_lev_werh + dX;		// Координата X нижнего правого угла чёрного участка  (Левая половина)
							Y_prav_nis = Y_lev_werh + dY;		// Координата Y нижнего правого угла чёрного участка  (Левая половина)
							Sum_chern_uchastok = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка (Левая половина)
							File1.write("\n			Чёрный участок № 1 (Левая половина) "+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok);
							
							// Получение суммарной яркости белого участка № 2 (Правая половина)
							X_lev_werh = X_levo + dX + 1;  		// Координата X верхнего левого угла белого участка (Правый половина)							
							Y_lev_werh = Y_werh;				// Координата Y верхнего левого угла белого участка (Правый половина)
							X_prav_nis = X_lev_werh + dX;  		// Координата X нижнего правого угла белого участка (Правый половина)
							Y_prav_nis = Y_lev_werh + dY;		// Координата Y нижнего правого угла белого участка (Правый половина)
							Sum_bel_uchastok = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей белого участка (Правый половина)
							File1.write("\n			Белый участок № 2 (Правая половина) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_bel_uchastok);
							
							// Получить результат маски № 11(сумма белого участка - сумма чёрного участка)							
							Rezult_Maska_11 = Math.abs((Sum_bel_uchastok-Sum_chern_uchastok)/(Sum_bel_uchastok+Sum_chern_uchastok));		
							File1.write("\n			Rezult_Maska_11 = "+Rezult_Maska_11);

							
							// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
							
							// Получить численную оценку для маски № 12 (глаза, щёки + нос).							
							File1.write("\n		Маска № 12 (Глаза, щёки + нос)");

							// Определить длину и ширину участка для маски № 12
							dX = Razmer_ramka;
							dY = Razmer_ramka * 1/6;

							// Получение суммарной яркости белого участка (переносица, глаза)
							X_lev_werh = X_levo;									// Координата X верхнего левого угла белого участка  (переносица, глаза)
							Y_lev_werh = Y_werh + Razmer_ramka * 1/6  ;				// Координата Y верхнего левого угла белого участка  (переносица, глаза)
							X_prav_nis = X_lev_werh + dX;							// Координата X нижнего правого угла белого участка  (переносица, глаза)	
							Y_prav_nis = Y_lev_werh + dY;							// Координата Y нижнего правого угла белого участка  (переносица, глаза)
							Sum_bel_uchastok = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей белого участка (переносица, глаза)
							File1.write("\n			Белый участок (переносица, глаза) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_bel_uchastok);
							
							// Получение суммарной яркости чёрного участка № 2 (щёки, нос)
							X_lev_werh = X_lev_werh;							// Координата X верхнего левого угла белого участка  (щёки, нос)
							Y_lev_werh = Y_prav_nis + 1;						// Координата Y верхнего левого угла белого участка  (щёки, нос)
							X_prav_nis = X_prav_nis;							// Координата X нижнего правого угла белого участка  (щёки, нос)	
							Y_prav_nis = Y_lev_werh + dY;						// Координата Y нижнего правого угла белого участка  (щёки, нос)
							Sum_chern_uchastok = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка (щёки, нос)
							File1.write("\n			Чёрный участок (щёки, нос) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok);
							
							// Получить результат маски № 12 (отношение яркости участка 1 к яркости участка 2)							
							Rezult_Maska_12 = Sum_bel_uchastok / Sum_chern_uchastok;		
							File1.write("\n		Маска № 12 (Глаза, щёки + нос) : "+Rezult_Maska_12);
							File1.write("\n			 ");

							// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -	
							
							// Получить численную оценку для маски № 13 (очки).
							File1.write("\n		Маска № 13 (Очки)");
						
							// Определить длину и ширину участка для маски № 13
							dX = Razmer_ramka/5;
							dY = Razmer_ramka/5;
							
							// Получение суммарной яркости чёрного участка № 1 (левый глаз 1)
							X_lev_werh = X_levo; 						// Координата X верхнего левого угла чёрного участка № 1 (левый глаз 1)
							Y_lev_werh = Y_werh + Razmer_ramka * 1/6;	// Координата Y верхнего левого угла чёрного участка № 1 (левый глаз 1)
							X_prav_nis = X_lev_werh + dX;				// Координата X нижнего правого угла чёрного участка № 1 (левый глаз 1)	
							Y_prav_nis = Y_lev_werh + dY;				// Координата Y нижнего правого угла чёрного участка № 1 (левый глаз 1)
							Sum_chern_uchastok_1 = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка № 1 (левый глаз)
							File1.write("\n			Чёрный участок № 1 (левый глаз 1) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok_1);

							// Получение суммарной яркости чёрного участка № 1 (левый глаз 2)
							X_lev_werh = X_prav_nis + 1; 				// Координата X верхнего левого угла чёрного участка № 1 (левый глаз 2)
							Y_lev_werh = Y_lev_werh; 					// Координата Y верхнего левого угла чёрного участка № 1 (левый глаз 2)
							X_prav_nis = X_lev_werh + dX;				// Координата X нижнего правого угла чёрного участка № 1 (левый глаз 2)	
							Y_prav_nis = Y_prav_nis;				// Координата Y нижнего правого угла чёрного участка № 1 (левый глаз 2)
							Sum_chern_uchastok_2 = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка № 2 (левый глаз)
							File1.write("\n			Чёрный участок № 2 (левый глаз 2) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok_2);
							
							// Получение суммарной яркости белого участка (переносица)	
							X_lev_werh = X_prav_nis + 1;						// Координата X верхнего левого угла белого участка (переносица) 
							Y_lev_werh = Y_lev_werh;							// Координата Y верхнего левого угла белого участка (переносица) 
							X_prav_nis = X_lev_werh + dX;						// Координата X нижнего правого угла белого участка (переносица)
							Y_prav_nis = Y_prav_nis;							// Координата Y нижнего правого угла белого участка (переносица)
							Sum_bel_uchastok = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis);			// Определить суммарную яркость пикселей белого участка   
							File1.write("\n			Белый участок      (переносица) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_bel_uchastok);
							
							// Получение суммарной яркости чёрного участка № 3 (правый глаз 1)
							X_lev_werh = X_prav_nis + 1;						// Координата X верхнего левого угла чёрного участка № 3 (правый глаз 1)
							Y_lev_werh = Y_lev_werh;							// Координата Y верхнего левого угла чёрного участка № 3 (правый глаз 1)
							X_prav_nis = X_lev_werh + dX;						// Координата X нижнего правого угла чёрного участка № 3 (правый глаз 1)	
							Y_prav_nis = Y_prav_nis;							// Координата Y нижнего правого угла чёрного участка № 3 (правый глаз 1)
							Sum_chern_uchastok_3 = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка № 3 (правый глаз 1)
							File1.write("\n			Чёрный участок № 3 (правый глаз 1)("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok_3);

							// Получение суммарной яркости чёрного участка № 4 (правый глаз 2)
							X_lev_werh = X_prav_nis + 1;						// Координата X верхнего левого угла чёрного участка № 4 (правый глаз 2)
							Y_lev_werh = Y_lev_werh;							// Координата Y верхнего левого угла чёрного участка № 4 (правый глаз 2)
							X_prav_nis = X_lev_werh + dX;						// Координата X нижнего правого угла чёрного участка № 4 (правый глаз 2)	
							Y_prav_nis = Y_prav_nis;							// Координата Y нижнего правого угла чёрного участка № 4 (правый глаз 2)
							Sum_chern_uchastok_4 = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка № 4 (правый глаз 2)
							File1.write("\n			Чёрный участок № 4 (правый глаз 2)("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok_4);
							
							// Получить результат маски № 13 (Сумма 4х чёрных участков/4)/(Сумма всех белых участков)							
							Rezult_Maska_13 = ((Sum_chern_uchastok_1 + Sum_chern_uchastok_2 + Sum_chern_uchastok_3 + Sum_chern_uchastok_4)/4)/Sum_bel_uchastok;		
							File1.write("\n		Маска № 13 (Очки): "+Rezult_Maska_13);
							File1.write("\n			 ");
							
							// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -	
							
							// Получить численную оценку для маски № 14 (Симметрия левой половины и правой половины на первой трети высоты).
							File1.write("\n		Маска № 14 (Симметрия левой половины и правой половины на первой трети высоты)");
							
							// Определить длину и ширину участка для маски № 14
							dX = Razmer_ramka/2 * 1/2;
							dY = Razmer_ramka/3-1;
							
							// Получение суммарной яркости чёрного участка № 1 (Левая половина)
							X_lev_werh = X_levo + Razmer_ramka/4;	// Координата X верхнего левого угла чёрного участка  (Левая половина)
							Y_lev_werh = Y_werh;					// Координата Y верхнего левого угла чёрного участка  (Левая половина)
							X_prav_nis = X_lev_werh + dX;			// Координата X нижнего правого угла чёрного участка  (Левая половина)
							Y_prav_nis = Y_lev_werh + dY;			// Координата Y нижнего правого угла чёрного участка  (Левая половина)
							Sum_chern_uchastok = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка (Левая половина)
							File1.write("\n			Чёрный участок № 1 (Левая половина) "+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok);
							
							// Получение суммарной яркости белого участка № 2 (Правая половина)
							X_lev_werh = X_levo + Razmer_ramka/4 + dX + 1;  		// Координата X верхнего левого угла белого участка (Правый половина)							
							Y_lev_werh = Y_werh;				// Координата Y верхнего левого угла белого участка (Правый половина)
							X_prav_nis = X_lev_werh + dX;  		// Координата X нижнего правого угла белого участка (Правый половина)
							Y_prav_nis = Y_lev_werh + dY;		// Координата Y нижнего правого угла белого участка (Правый половина)
							Sum_bel_uchastok = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей белого участка (Правый половина)
							File1.write("\n			Белый участок № 2 (Правая половина) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_bel_uchastok);
							
							// Получить результат маски № 14 (сумма белого участка - сумма чёрного участка)							
							Rezult_Maska_14 = Math.abs((Sum_bel_uchastok-Sum_chern_uchastok)/(Sum_bel_uchastok+Sum_chern_uchastok));		
							File1.write("\n			Rezult_Maska_14 = "+Rezult_Maska_14);

							// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -	
							
							// Получить численную оценку для маски № 15 (Симметрия левой половины и правой половины на второй трети высоты).
							File1.write("\n		Маска № 15 (Симметрия левой половины и правой половины на второй трети высоты)");
							
							// Определить длину и ширину участка для маски № 15
							dX = Razmer_ramka/2 * 1/2;
							dY = Razmer_ramka/3-1;
							
							// Получение суммарной яркости чёрного участка № 1 (Левая половина)
							X_lev_werh = X_levo + Razmer_ramka/4;				// Координата X верхнего левого угла чёрного участка  (Левая половина)
							Y_lev_werh = Y_werh + dY + 1;		// Координата Y верхнего левого угла чёрного участка  (Левая половина)
							X_prav_nis = X_lev_werh + dX;		// Координата X нижнего правого угла чёрного участка  (Левая половина)
							Y_prav_nis = Y_lev_werh + dY;		// Координата Y нижнего правого угла чёрного участка  (Левая половина)
							Sum_chern_uchastok = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка (Левая половина)
							File1.write("\n			Чёрный участок № 1 (Левая половина) "+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok);
							
							// Получение суммарной яркости белого участка № 2 (Правая половина)
							X_lev_werh = X_levo + Razmer_ramka/4 + dX + 1;  		// Координата X верхнего левого угла белого участка (Правый половина)							
							Y_lev_werh = Y_werh + dY + 1;		// Координата Y верхнего левого угла белого участка (Правый половина)
							X_prav_nis = X_lev_werh + dX;  		// Координата X нижнего правого угла белого участка (Правый половина)
							Y_prav_nis = Y_lev_werh + dY;		// Координата Y нижнего правого угла белого участка (Правый половина)
							Sum_bel_uchastok = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей белого участка (Правый половина)
							File1.write("\n			Белый участок № 2 (Правая половина) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_bel_uchastok);
							
							// Получить результат маски № 15 (сумма белого участка - сумма чёрного участка)							
							Rezult_Maska_15 = Math.abs((Sum_bel_uchastok-Sum_chern_uchastok)/(Sum_bel_uchastok+Sum_chern_uchastok));		
							File1.write("\n			Rezult_Maska_15 = "+Rezult_Maska_15);
							
							// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -	
							
							// Получить численную оценку для маски № 16 (Симметрия левой половины и правой половины на третей трети высоты).
							File1.write("\n		Маска № 16 (Симметрия левой половины и правой половины на третей трети высоты)");
							
							// Определить длину и ширину участка для маски № 16
							dX = Razmer_ramka/2 * 1/2;
							dY = Razmer_ramka/3-1;
							
							// Получение суммарной яркости чёрного участка № 1 (Левая половина)
							X_lev_werh = X_levo + Razmer_ramka/4;				// Координата X верхнего левого угла чёрного участка  (Левая половина)
							Y_lev_werh = Y_werh + 2*dY + 2;		// Координата Y верхнего левого угла чёрного участка  (Левая половина)
							X_prav_nis = X_lev_werh + dX;		// Координата X нижнего правого угла чёрного участка  (Левая половина)
							Y_prav_nis = Y_lev_werh + dY;		// Координата Y нижнего правого угла чёрного участка  (Левая половина)
							Sum_chern_uchastok = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка (Левая половина)
							File1.write("\n			Чёрный участок № 1 (Левая половина) "+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok);
							
							// Получение суммарной яркости белого участка № 2 (Правая половина)
							X_lev_werh = X_levo  + Razmer_ramka/4 + dX + 1;  		// Координата X верхнего левого угла белого участка (Правый половина)							
							Y_lev_werh = Y_werh + 2*dY + 2;		// Координата Y верхнего левого угла белого участка (Правый половина)
							X_prav_nis = X_lev_werh + dX;  		// Координата X нижнего правого угла белого участка (Правый половина)
							Y_prav_nis = Y_lev_werh + dY;		// Координата Y нижнего правого угла белого участка (Правый половина)
							Sum_bel_uchastok = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей белого участка (Правый половина)
							File1.write("\n			Белый участок № 2 (Правая половина) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_bel_uchastok);
							
							// Получить результат маски № 16 (сумма белого участка - сумма чёрного участка)							
							Rezult_Maska_16 = Math.abs((Sum_bel_uchastok-Sum_chern_uchastok)/(Sum_bel_uchastok+Sum_chern_uchastok));		
							File1.write("\n			Rezult_Maska_16 = "+Rezult_Maska_16);

							//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
							//

							// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
							
							// Получить численную оценку для маски № 17 (глаза, щёки + нос).							
							File1.write("\n		Маска № 17 (Глаза, щёки + нос)");

							// Определить длину и ширину участка для маски № 17
							dX = Razmer_ramka;
							dY = Razmer_ramka * 1/3;

							// Получение суммарной яркости белого участка (переносица, глаза)
							X_lev_werh = X_levo;									// Координата X верхнего левого угла белого участка  (переносица, глаза)
							Y_lev_werh = Y_werh;									// Координата Y верхнего левого угла белого участка  (переносица, глаза)
							X_prav_nis = X_lev_werh + dX;							// Координата X нижнего правого угла белого участка  (переносица, глаза)	
							Y_prav_nis = Y_lev_werh + dY;							// Координата Y нижнего правого угла белого участка  (переносица, глаза)
							Sum_bel_uchastok = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей белого участка (переносица, глаза)
							File1.write("\n			Белый участок (переносица, глаза) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_bel_uchastok);
							
							// Получение суммарной яркости чёрного участка № 2 (щёки, нос)
							X_lev_werh = X_lev_werh;							// Координата X верхнего левого угла белого участка  (щёки, нос)
							Y_lev_werh = Y_prav_nis + 1;						// Координата Y верхнего левого угла белого участка  (щёки, нос)
							X_prav_nis = X_prav_nis;							// Координата X нижнего правого угла белого участка  (щёки, нос)	
							Y_prav_nis = Y_lev_werh + dY;						// Координата Y нижнего правого угла белого участка  (щёки, нос)
							Sum_chern_uchastok = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка (щёки, нос)
							File1.write("\n			Чёрный участок (щёки, нос) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok);
							
							// Получить результат маски № 17 (отношение яркости участка 1 к яркости участка 2)							
							Rezult_Maska_17 = Sum_bel_uchastok / Sum_chern_uchastok;		
							File1.write("\n		Маска № 17 (Глаза, щёки + нос) : "+Rezult_Maska_17);
							File1.write("\n			 ");

							// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -	
							
							// Получить численную оценку для маски № 18 (очки).
							File1.write("\n		Маска № 18 (Очки)");
						
							// Определить длину и ширину участка для маски № 18
							dX = Razmer_ramka/5;
							dY = Razmer_ramka/3;
							
							// Получение суммарной яркости чёрного участка № 1 (левый глаз 1)
							X_lev_werh = X_levo; 						// Координата X верхнего левого угла чёрного участка № 1 (левый глаз 1)
							Y_lev_werh = Y_werh;						// Координата Y верхнего левого угла чёрного участка № 1 (левый глаз 1)
							X_prav_nis = X_lev_werh + dX;				// Координата X нижнего правого угла чёрного участка № 1 (левый глаз 1)	
							Y_prav_nis = Y_lev_werh + dY;				// Координата Y нижнего правого угла чёрного участка № 1 (левый глаз 1)
							Sum_chern_uchastok_1 = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка № 1 (левый глаз)
							File1.write("\n			Чёрный участок № 1 (левый глаз 1) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok_1);

							// Получение суммарной яркости чёрного участка № 2 (левый глаз 2)
							X_lev_werh = X_prav_nis + 1; 				// Координата X верхнего левого угла чёрного участка № 1 (левый глаз 2)
							Y_lev_werh = Y_lev_werh; 					// Координата Y верхнего левого угла чёрного участка № 1 (левый глаз 2)
							X_prav_nis = X_lev_werh + dX;				// Координата X нижнего правого угла чёрного участка № 1 (левый глаз 2)	
							Y_prav_nis = Y_prav_nis;				// Координата Y нижнего правого угла чёрного участка № 1 (левый глаз 2)
							Sum_chern_uchastok_2 = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка № 2 (левый глаз)
							File1.write("\n			Чёрный участок № 2 (левый глаз 2) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok_2);
							
							// Получение суммарной яркости белого участка (переносица)	
							X_lev_werh = X_prav_nis + 1;						// Координата X верхнего левого угла белого участка (переносица) 
							Y_lev_werh = Y_lev_werh;							// Координата Y верхнего левого угла белого участка (переносица) 
							X_prav_nis = X_lev_werh + dX;						// Координата X нижнего правого угла белого участка (переносица)
							Y_prav_nis = Y_prav_nis;							// Координата Y нижнего правого угла белого участка (переносица)
							Sum_bel_uchastok = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis);			// Определить суммарную яркость пикселей белого участка   
							File1.write("\n			Белый участок      (переносица) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_bel_uchastok);
							
							// Получение суммарной яркости чёрного участка № 3 (правый глаз 1)
							X_lev_werh = X_prav_nis + 1;						// Координата X верхнего левого угла чёрного участка № 3 (правый глаз 1)
							Y_lev_werh = Y_lev_werh;							// Координата Y верхнего левого угла чёрного участка № 3 (правый глаз 1)
							X_prav_nis = X_lev_werh + dX;						// Координата X нижнего правого угла чёрного участка № 3 (правый глаз 1)	
							Y_prav_nis = Y_prav_nis;							// Координата Y нижнего правого угла чёрного участка № 3 (правый глаз 1)
							Sum_chern_uchastok_3 = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка № 3 (правый глаз 1)
							File1.write("\n			Чёрный участок № 3 (правый глаз 1)("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok_3);

							// Получение суммарной яркости чёрного участка № 4 (правый глаз 2)
							X_lev_werh = X_prav_nis + 1;						// Координата X верхнего левого угла чёрного участка № 4 (правый глаз 2)
							Y_lev_werh = Y_lev_werh;							// Координата Y верхнего левого угла чёрного участка № 4 (правый глаз 2)
							X_prav_nis = X_lev_werh + dX;						// Координата X нижнего правого угла чёрного участка № 4 (правый глаз 2)	
							Y_prav_nis = Y_prav_nis;							// Координата Y нижнего правого угла чёрного участка № 4 (правый глаз 2)
							Sum_chern_uchastok_4 = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка № 4 (правый глаз 2)
							File1.write("\n			Чёрный участок № 4 (правый глаз 2)("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok_4);
							
							// Получить результат маски № 18 (Сумма 4х чёрных участков/4)/(Сумма всех белых участков)							
							Rezult_Maska_18 = ((Sum_chern_uchastok_1 + Sum_chern_uchastok_2 + Sum_chern_uchastok_3 + Sum_chern_uchastok_4)/4)/Sum_bel_uchastok;		
							File1.write("\n		Маска № 18 (Очки): "+Rezult_Maska_18);
							File1.write("\n			 ");
							
							// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
							
							// Получить численную оценку для маски № 19 (щёки + нос, подбородок).							
							File1.write("\n		Маска № 19 (Щёки + нос, подбородок)");

							// Определить длину и ширину участка для маски № 19
							dX = Razmer_ramka;
							dY = Razmer_ramka * 1/3;

							// Получение суммарной яркости белого участка (щёки, нос)
							X_lev_werh = X_levo;									// Координата X верхнего левого угла белого участка  (переносица, глаза)
							Y_lev_werh = Y_werh + dY + 1;							// Координата Y верхнего левого угла белого участка  (переносица, глаза)
							X_prav_nis = X_lev_werh + dX;							// Координата X нижнего правого угла белого участка  (переносица, глаза)	
							Y_prav_nis = Y_lev_werh + dY;							// Координата Y нижнего правого угла белого участка  (переносица, глаза)
							Sum_bel_uchastok = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей белого участка (переносица, глаза)
							File1.write("\n			Белый участок (переносица, глаза) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_bel_uchastok);
							
							// Получение суммарной яркости чёрного участка № 2 (щёки, нос)
							X_lev_werh = X_lev_werh;							// Координата X верхнего левого угла белого участка  (щёки, нос)
							Y_lev_werh = Y_prav_nis + 1;						// Координата Y верхнего левого угла белого участка  (щёки, нос)
							X_prav_nis = X_prav_nis;							// Координата X нижнего правого угла белого участка  (щёки, нос)	
							Y_prav_nis = Y_lev_werh + dY;						// Координата Y нижнего правого угла белого участка  (щёки, нос)
							Sum_chern_uchastok = this.BMP_File_Input.Sum_Yark_1( X_lev_werh, Y_lev_werh, X_prav_nis, Y_prav_nis );	// Определить суммарную яркость пикселей чёрного участка (щёки, нос)
							File1.write("\n			Чёрный участок (рот, подбородок) ("+X_lev_werh+","+Y_lev_werh+") - ("+X_prav_nis+","+Y_prav_nis+") Сумм.яркость = "+Sum_chern_uchastok);
							
							// Получить результат маски № 19 (отношение яркости участка 1 к яркости участка 2)							
							Rezult_Maska_19 = Sum_chern_uchastok / Sum_bel_uchastok;		
							File1.write("\n		Маска № 19 (Глаза, щёки + нос) : "+Rezult_Maska_19);
							File1.write("\n			 ");
							
							//
							///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
							
							
//							if ((Rezult_Maska_06 < 0.005) || (Rezult_Maska_07 < 0.005))
//							if (Rezult_Maska_11 < 0.005)
//							if ((Rezult_Maska_11 < 0.005) && (0.3 < Rezult_Maska_12) && (Rezult_Maska_12 < 0.9))
//							if ((Rezult_Maska_11 < 0.012) && (0.45 < Rezult_Maska_12) && (Rezult_Maska_12 < 0.93) && (0.45 < Rezult_Maska_13) && (Rezult_Maska_13 < 0.93))
							
//							if ((Rezult_Maska_14 < 0.02) && (Rezult_Maska_15 < 0.02) && (Rezult_Maska_16 < 0.02) && (0.45 < Rezult_Maska_12) && (Rezult_Maska_12 < 0.93) && (0.45 < Rezult_Maska_13) && (Rezult_Maska_13 < 0.93))

//							if ((Rezult_Maska_11 < 0.012) && (0.55 < Rezult_Maska_17) && (Rezult_Maska_17 < 0.95) && (0.55 < Rezult_Maska_18) && (Rezult_Maska_18 < 0.95))
//							if ((Rezult_Maska_11 < 0.012) && (0.55 < Rezult_Maska_12) && (Rezult_Maska_17 < 0.93) && (0.55 < Rezult_Maska_13) && (Rezult_Maska_13 < 0.93))

							double usl_simmetriya, usl_glasa_temnee1, usl_glasa_temnee2, usl_podborodok_temnee;
							int kol_wyp_usl;

							kol_wyp_usl = 0;							
							
							if ((Rezult_Maska_09 < 0.03) || (Rezult_Maska_11 < 0.01) || ((Rezult_Maska_14 < 0.015) && (Rezult_Maska_15 < 0.015) && (Rezult_Maska_16 < 0.015)))
							{
								usl_simmetriya = 1;
								kol_wyp_usl++;
							}
							else
							{
								usl_simmetriya = 0;								
							}
							
							if (((0.45 < Rezult_Maska_12) && (Rezult_Maska_12 < 0.93)) || ((0.55 < Rezult_Maska_17) && (Rezult_Maska_17 < 0.93)))
							{
								usl_glasa_temnee1 = 1;
								kol_wyp_usl++;								
							}
							else
							{
								usl_glasa_temnee1 = 0;								
							}

							if (((0.45 < Rezult_Maska_13) && (Rezult_Maska_13 < 0.93)) || ((0.55 < Rezult_Maska_18) && (Rezult_Maska_18 < 0.93)))
							{
								usl_glasa_temnee2 = 1;
								kol_wyp_usl++;								
							}
							else
							{
								usl_glasa_temnee2 = 0;								
							}

							if ( (0.55 < Rezult_Maska_19) && (Rezult_Maska_19 < 0.93))
							{
								usl_podborodok_temnee = 1;
								kol_wyp_usl++;								
							}
							else
							{
								usl_podborodok_temnee = 0;								
							}

							if (Rezult_Maska_09 < 0.03)
							{
								kol_wyp_usl++;								
							}
							
							
							
							
							
							
							if (kol_wyp_usl>=5)
							{
								// Если соблюдаются условия по маскам. 

								// Создание BMP-файла для записи протокола работы программы
								this.BMP_File_Protokol = new BMP_File(BMP_Protokol_FileName, BMP_Protokol_Max_X, BMP_Protokol_Max_Y);
								
								//	Передача в BMP-файл рассмотренного фрагмента изображения
								for (Y1=0; Y1<=Razmer_ramka; Y1++)
									for (X1=0; X1<=Razmer_ramka; X1++)
										this.BMP_File_Protokol.set_Рixel(X1, BMP_Protokol_Max_Y-Y1, this.BMP_File_Input.Blue[X_levo+X1][Y_werh+Y1], this.BMP_File_Input.Green[X_levo+X1][Y_werh+Y1], this.BMP_File_Input.Red[X_levo+X1][Y_werh+Y1]); 

								// Выдать в BMP-файл рассчитанные значения для масок 
								//this.BMP_File_Protokol.Write_text(0, Razmer_ramka+4,   " MACKA N 01      "+Rezult_Maska_01);  
								//this.BMP_File_Protokol.Write_text(0, Razmer_ramka+19,  " MACKA N 02      "+Rezult_Maska_02);
								//this.BMP_File_Protokol.Write_text(0, Razmer_ramka+34,  " MACKA N 03      "+Rezult_Maska_03);							
								//this.BMP_File_Protokol.Write_text(0, Razmer_ramka+49,  " MACKA N 04      "+Rezult_Maska_04);
								//this.BMP_File_Protokol.Write_text(0, Razmer_ramka+64,  " MACKA N 05      "+Rezult_Maska_05);
								//this.BMP_File_Protokol.Write_text(0, Razmer_ramka+79,  " MACKA N 06      "+Rezult_Maska_06);
								//this.BMP_File_Protokol.Write_text(0, Razmer_ramka+94,  " MACKA N 07      "+Rezult_Maska_07);
								//this.BMP_File_Protokol.Write_text(0, Razmer_ramka+109, " MACKA N 08      "+Rezult_Maska_08);							
								/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
								//	
								this.BMP_File_Protokol.Write_text(0, Razmer_ramka+  4, " MACKA N 09      "+Rezult_Maska_09);							
//								this.BMP_File_Protokol.Write_text(0, Razmer_ramka+ 19, " MACKA N 10      "+Rezult_Maska_10);
								this.BMP_File_Protokol.Write_text(0, Razmer_ramka+ 34, " MACKA N 11      "+Rezult_Maska_11);
								this.BMP_File_Protokol.Write_text(0, Razmer_ramka+ 49, " MACKA N 12      "+Rezult_Maska_12);
								this.BMP_File_Protokol.Write_text(0, Razmer_ramka+ 64, " MACKA N 13      "+Rezult_Maska_13);
								this.BMP_File_Protokol.Write_text(0, Razmer_ramka+ 79, " MACKA N 14      "+Rezult_Maska_14);
								this.BMP_File_Protokol.Write_text(0, Razmer_ramka+ 94, " MACKA N 15      "+Rezult_Maska_15);
								this.BMP_File_Protokol.Write_text(0, Razmer_ramka+109, " MACKA N 16      "+Rezult_Maska_16);
								this.BMP_File_Protokol.Write_text(0, Razmer_ramka+124, " MACKA N 17      "+Rezult_Maska_17);
								this.BMP_File_Protokol.Write_text(0, Razmer_ramka+139, " MACKA N 18      "+Rezult_Maska_18);
								this.BMP_File_Protokol.Write_text(0, Razmer_ramka+154, " MACKA N 19      "+Rezult_Maska_19);
								//
								/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
								
								// Вызов метода "Записать" объекта "this.BMP_File_Protokol" 
								this.BMP_File_Protokol.BMP_File_Save();
								
								// Вызов метода уничтожения объекта "this.BMP_File_Protokol"
								this.BMP_File_Protokol.dispose();	
								this.BMP_File_Protokol = null;
							}
							
							
							/////////////////////////////////////
							//
							// Нарастить счётчик картинок	
							nom_kart++;							
							//if (nom_kart>115584)
							//{
							//	System.exit(0);			// Выход из программы
							//}
							//
							/////////////////////////////////////
						}
					}
					Razmer_ramka *= 1.2;	// Увеличить размер стороны рамки в 1.2 раза 
				}
				
				File1.flush();		// Сбросить содержимое буфера в текстовый файл
				File1.close();  	// Закрыть тексовый файл предназначенный для вывода протокола работы программы
	        }
			catch(IOException e1)
			{
				// Неудача при попытке создать текстовый файл для вывода протокола работы программы.
				System.out.println(" Ошибка !!! Невозможно записать данные в файл : "+e1.getMessage());
			} 
		}		
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////
	//  Главная функция класса
	//
	public static void main(String[] args) 
	{
		int 	kol_argument;			// Количество аргументов в командной строке 
		Id_Face	Id_Face1;				// Указатель на объект класса "Id_Face" - идентификатор лиц
		String	BMP_Input_FileName;		// Имя файла содержащего изображение
		
		kol_argument = args.length;		// Считать количество аргументов в командной строке

		if (kol_argument != 1)
		{
			// Количество аргументов в командной строке не равно 1.
			// Выдать на экран предупреждающее сообщение.
			System.out.println(" Количество аргументов в командной строке не равно 1");
			System.out.println(" Вызови программу набрав в командной строке :  java Id_Face ИмяФайла.bmp ");			
			System.exit(0);			// Выход из программы
		}
		
		BMP_Input_FileName = args[0];					// Считать имя файла в котором рассматриваемое изображение  
		Id_Face1 = new Id_Face(BMP_Input_FileName); 	// Создать объект - экземпляр класса "Id_Face" (Идентификатор лиц) передав ему имя файла с изображением.   
	}
	//////////////////////////////////////////////////////////////////////////////////////////
	
}
